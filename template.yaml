AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  managed-aws-educate-classroom
Metadata:
  AWS::ServerlessRepo::Application:
    Name: managed-aws-educate-classroom
    Description: >
      A centralized control to all studentâ€™s AWS Educate Classroom Account. 
      Educators can create and delete cloudformation stack in all student's AWS Account in each AWS Educate Classroom.
    Author: Cyrus Wong
    SpdxLicenseId: Apache-2.0
    LicenseUrl: LICENSE.txt
    ReadmeUrl: README.md
    Labels: ['cloudformation','AWS_Educate']
    HomePageUrl: https://github.com/wongcyrus/managed-aws-educate-classroom
    SemanticVersion: 0.0.2
    SourceCodeUrl: https://github.com/wongcyrus/managed-aws-educate-classroom


  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "AWS SES Inbox (Optional)"
        Parameters: 
          - SesInboxTopic
          - BucketName
      - 
        Label: 
          default: "Teacher Email Settings (Optional)"
        Parameters: 
          - TeacherCommandEmail
          - TeacherEmailDomains
      - 
        Label: 
          default: "Student Email Settings (Optional)"
        Parameters: 
          - StudentCommandEmail
          - StudentEmailDomains          
    ParameterLabels:
      CalendarUrl:
        default: "Public Class Schedule Calendar Url"
      SesInboxTopic: 
        default: "AWS SES Inbox email SNS Topic"
      BucketName: 
        default: "AWS SES Inbox Bucket"
      StudentCommandEmail: 
        default: "Student Command Email Address"
      StudentEmailDomains: 
        default: "White List Student email domain"
      TeacherCommandEmail: 
        default: "Teacher Command Email Address"        
      TeacherEmailDomains: 
        default: "White List Teacher email domain" 
        
Parameters:
  SesInboxTopic:
    Type: String
    Default: ""
  CalendarUrl:
    Type: String
    Default: ""
  BucketName:
    Type: String
    Default: ""
  StudentCommandEmail:
    Type: String
    Default: ""
  StudentEmailDomains:
    Type: String
    Default: ""
  TeacherCommandEmail:
    Type: String
    Default: ""
  TeacherEmailDomains:
    Type: String
    Default: ""
    
Globals:
  Function:
    Handler: app.lambdaHandler
    Timeout: 180
    Runtime: nodejs12.x
    Layers: 
      - !Ref CommonLayer
    Environment:
      Variables:
        StudentAccountTable: !Ref StudentAccountTable
        ClassroomBucket: !Ref ClassroomBucket

Conditions:
  UseAwsSesInbox: !Not [ !Equals [ !Ref SesInboxTopic, "" ]]
  UseCalendarTrigger: !Not [ !Equals [ !Ref CalendarUrl, "" ]]

Resources:

  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: managed-aws-educate-classroom-common-layer
      Description: Common code.
      ContentUri: layer/
      CompatibleRuntimes:
        - nodejs12.x

# Setup Student Account.        
  SetupStudentAccountQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 180
      RedrivePolicy: 
        deadLetterTargetArn: !GetAtt SetupStudentAccountDeadLetterQueue.Arn
        maxReceiveCount: 3    
  SetupStudentAccountDeadLetterQueue: 
    Type: AWS::SQS::Queue

  SetupStudentAccountSubscription:
    Type: 'AWS::SNS::Subscription'
    Condition: UseAwsSesInbox
    Properties:
      TopicArn: !Ref SesInboxTopic
      Endpoint: !GetAtt SetupStudentAccountQueue.Arn
      Protocol: sqs
      FilterPolicy:
        receiver:
          - !Ref StudentCommandEmail
        intentName:
          - RegisterStudentAccountIntent
        senderEmailDomain: !Split [ "," , !Ref StudentEmailDomains]
          
  SetupStudentAccountQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Condition: UseAwsSesInbox
    Properties:
      Queues: [!Ref 'SetupStudentAccountQueue']
      PolicyDocument:
        Version: '2008-10-17'
        Id: PublicationPolicy
        Statement:
        - Sid: Allow-SNS-SendMessage
          Effect: Allow
          Principal:
            AWS: '*'
          Action: ['sqs:SendMessage']
          Resource: !GetAtt [SetupStudentAccountQueue, Arn]
          Condition:
            ArnEquals:
              aws:SourceArn: !Ref 'SesInboxTopic'
       
  SetupStudentAccountFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: setup-student-account/
      Policies:
        - AmazonDynamoDBFullAccess
        - S3ReadPolicy:
            BucketName: !Ref ClassroomBucket
        - !If [UseAwsSesInbox, S3ReadPolicy:{ BucketName: !Ref 'BucketName'}, !Ref "AWS::NoValue"]
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: "sts:AssumeRole"
              Resource: !Sub "arn:aws:iam::*:role/crossaccountteacher${AWS::AccountId}" 
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SetupStudentAccountQueue.Arn
            BatchSize: 1

# Create and Start Classroom
  StartInstanceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: start-instance/
      Policies:
        - AmazonDynamoDBFullAccess
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: "sts:AssumeRole"
              Resource: !Sub "arn:aws:iam::*:role/crossaccountteacher${AWS::AccountId}"

  CreateStudentStackFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: create-student-stack/
      Policies:
        - AmazonDynamoDBFullAccess
        - S3ReadPolicy:
            BucketName: !Ref ClassroomBucket
        - !If [UseAwsSesInbox, S3ReadPolicy:{ BucketName: !Ref 'BucketName'}, !Ref "AWS::NoValue"]
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: "sts:AssumeRole"
              Resource: !Sub "arn:aws:iam::*:role/crossaccountteacher${AWS::AccountId}"
      Environment:
        Variables:
          RdpFileUrl: !Sub 'https://${HttpApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/rdp/login.rdp'
          PemKeyFileUrl: !Sub 'https://${HttpApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/pem/key.pem'
          
  CreateClassroomQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 180
      RedrivePolicy: 
        deadLetterTargetArn: !GetAtt CreateClassroomDeadLetterQueue.Arn
        maxReceiveCount: 3    
  CreateClassroomDeadLetterQueue: 
    Type: AWS::SQS::Queue

  CreateClassroomSubscription:
    Type: 'AWS::SNS::Subscription'
    Condition: UseAwsSesInbox
    Properties:
      TopicArn: !Ref SesInboxTopic
      Endpoint: !GetAtt [CreateClassroomQueue, Arn]
      Protocol: sqs
      FilterPolicy:
        receiver:
          - !Ref TeacherCommandEmail
        intentName:
          - CreateClassroomIntent
        senderEmailDomain: !Split [ "," , !Ref TeacherEmailDomains]
          
  CreateClassroomQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Condition: UseAwsSesInbox
    Properties:
      Queues: [!Ref 'CreateClassroomQueue']
      PolicyDocument:
        Version: '2008-10-17'
        Id: PublicationPolicy
        Statement:
        - Sid: Allow-SNS-SendMessage
          Effect: Allow
          Principal:
            AWS: '*'
          Action: ['sqs:SendMessage']
          Resource: !GetAtt CreateClassroomQueue.Arn
          Condition:
            ArnEquals:
              aws:SourceArn: !Ref 'SesInboxTopic'              
  CreateClassroomFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: create-classroom/
      Policies:
        - AmazonDynamoDBFullAccess
        - S3ReadPolicy:
            BucketName: !Ref ClassroomBucket
        - !If [UseAwsSesInbox, S3ReadPolicy:{ BucketName: !Ref 'BucketName'}, !Ref "AWS::NoValue"]
        - LambdaInvokePolicy:
            FunctionName: !Ref CreateStudentStackFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref StartInstanceFunction            
      Environment:
        Variables:
          CreateStudentStackFunctionArn: !GetAtt CreateStudentStackFunction.Arn
          StartInstanceFunctionArn: !GetAtt StartInstanceFunction.Arn
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt CreateClassroomQueue.Arn
            BatchSize: 1        

# Delete or Stop Classroom
  StopInstanceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: stop-instance/
      Policies:
        - AmazonDynamoDBFullAccess
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: "sts:AssumeRole"
              Resource: !Sub "arn:aws:iam::*:role/crossaccountteacher${AWS::AccountId}"
              
  DeleteStudentStackFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: delete-student-stack/
      Policies:
        - AmazonDynamoDBFullAccess
        - S3ReadPolicy:
            BucketName: !Ref ClassroomBucket
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: "sts:AssumeRole"
              Resource: !Sub "arn:aws:iam::*:role/crossaccountteacher${AWS::AccountId}"

  DeleteClassroomQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 180
      RedrivePolicy: 
        deadLetterTargetArn: !GetAtt DeleteClassroomDeadLetterQueue.Arn
        maxReceiveCount: 3    
  DeleteClassroomDeadLetterQueue: 
    Type: AWS::SQS::Queue

  DeleteClassroomSubscription:
    Type: 'AWS::SNS::Subscription'
    Condition: UseAwsSesInbox    
    Properties:
      TopicArn: !Ref SesInboxTopic
      Endpoint: !GetAtt [DeleteClassroomQueue, Arn]
      Protocol: sqs
      FilterPolicy:
        receiver:
          - !Ref TeacherCommandEmail
        intentName:
          - DeleteClassroomIntent
        senderEmailDomain: !Split [ "," , !Ref TeacherEmailDomains]
          
  DeleteClassroomQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Condition: UseAwsSesInbox
    Properties:
      Queues: [!Ref 'DeleteClassroomQueue']
      PolicyDocument:
        Version: '2008-10-17'
        Id: PublicationPolicy
        Statement:
        - Sid: Allow-SNS-SendMessage
          Effect: Allow
          Principal:
            AWS: '*'
          Action: ['sqs:SendMessage']
          Resource: !GetAtt DeleteClassroomQueue.Arn
          Condition:
            ArnEquals:
              aws:SourceArn: !Ref 'SesInboxTopic'              
  DeleteClassroomFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: delete-classroom/
      Policies:
        - AmazonDynamoDBFullAccess
        - S3ReadPolicy:
            BucketName: !Ref ClassroomBucket
        - !If [UseAwsSesInbox, S3ReadPolicy:{ BucketName: !Ref 'BucketName'}, !Ref "AWS::NoValue"]
        - LambdaInvokePolicy:
            FunctionName: !Ref DeleteStudentStackFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref StopInstanceFunction
      Environment:
        Variables:
          DeleteStudentStackFunctionArn: !GetAtt DeleteStudentStackFunction.Arn
          StopInstanceFunctionArn: !GetAtt StopInstanceFunction.Arn
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt DeleteClassroomQueue.Arn
            BatchSize: 1

# Grader Function
  GradeClassroomFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: grade-classroom/
      Policies:
        - AmazonDynamoDBFullAccess
        - !If [UseAwsSesInbox, S3ReadPolicy:{ BucketName: !Ref 'BucketName'}, !Ref "AWS::NoValue"]
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: "sts:AssumeRole"
              Resource: !Sub "arn:aws:iam::*:role/crossaccountteacher${AWS::AccountId}"            
            - Effect: Allow
              Action: "lambda:InvokeFunction"
              Resource: !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*MarkerFunction*"
            - Effect: Allow
              Action: "lambda:listFunctions"
              Resource: "*"
# Database        
  StudentAccountTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions: 
        - 
          AttributeName: "classroomName"
          AttributeType: "S"
        - 
          AttributeName: "email"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "classroomName"
          KeyType: "HASH"
        - 
          AttributeName: "email"
          KeyType: "RANGE"
      GlobalSecondaryIndexes: 
        - 
          IndexName: "emailGSI"
          KeySchema: 
            - 
              AttributeName: "email"
              KeyType: "HASH"
            - 
              AttributeName: "classroomName"
              KeyType: "RANGE"
          Projection: 
            ProjectionType: "ALL"

  ClassroomBucket:
    Type: AWS::S3::Bucket
    
# WebUI for student registration.
  HttpApi:
    Type: AWS::Serverless::HttpApi
    
  SetupStudentAccountWebUiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: web-ui/
      Handler: setupStudentAccount.lambdaHandler
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref SetupStudentAccountFunction
      Environment:
        Variables:
          SetupStudentAccountFunction: !GetAtt SetupStudentAccountFunction.Arn  
      Events:
        ExplicitApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: ANY
            Path: /

  GetRdpFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: web-ui/
      Handler: getRdp.lambdaHandler
      Events:
        ExplicitApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: GET
            Path: /rdp/login.rdp

  GetPemKeyFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: web-ui/
      Handler: getPemKey.lambdaHandler
      Events:
        ExplicitApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: GET
            Path: /pem/key.pem

  GetCrossAccountRoleWebUiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: web-ui/
      Handler: getCrossAccount.lambdaHandler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref StudentAccountTable
      Environment:
        Variables:
          SetupStudentAccountFunction: !GetAtt SetupStudentAccountFunction.Arn  
      Events:
        ExplicitApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: ANY
            Path: /getCrossAccount.html

# Use Calendar Trigger
  CalendarEventsApplication:
    Type: AWS::Serverless::Application
    Condition: UseCalendarTrigger
    Properties:
      Location:
        ApplicationId: 'arn:aws:serverlessrepo:us-east-1:111964674713:applications/calendar-trigger'
        SemanticVersion: 0.0.1
      Parameters:
        CalendarUrl: !Ref CalendarUrl

  DeleteClassroomCalendarEventsSubscription:
    Type: 'AWS::SNS::Subscription'
    Condition: UseCalendarTrigger    
    Properties:
      TopicArn: !GetAtt [CalendarEventsApplication, Outputs.CanlenderEventStopTopic]
      Endpoint: !GetAtt [DeleteClassroomQueue, Arn]
      Protocol: sqs

  DeleteClassroomCalendarEventsQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Condition: UseCalendarTrigger
    Properties:
      Queues: [!Ref 'DeleteClassroomQueue']
      PolicyDocument:
        Version: '2008-10-17'
        Id: PublicationPolicy
        Statement:
        - Sid: Allow-SNS-SendMessage
          Effect: Allow
          Principal:
            AWS: '*'
          Action: ['sqs:SendMessage']
          Resource: !GetAtt DeleteClassroomQueue.Arn
          Condition:
            ArnEquals:
              aws:SourceArn: !GetAtt [CalendarEventsApplication, Outputs.CanlenderEventStopTopic]

  CreateClassroomCalendarEventsSubscription:
    Type: 'AWS::SNS::Subscription'
    Condition: UseCalendarTrigger
    Properties:
      TopicArn: !GetAtt [CalendarEventsApplication, Outputs.CanlenderEventStartTopic]
      Endpoint: !GetAtt [CreateClassroomQueue, Arn]
      Protocol: sqs
      
  CreateClassroomCalendarEventsQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Condition: UseCalendarTrigger
    Properties:
      Queues: [!Ref 'CreateClassroomQueue']
      PolicyDocument:
        Version: '2008-10-17'
        Id: PublicationPolicy
        Statement:
        - Sid: Allow-SNS-SendMessage
          Effect: Allow
          Principal:
            AWS: '*'
          Action: ['sqs:SendMessage']
          Resource: !GetAtt CreateClassroomQueue.Arn
          Condition:
            ArnEquals:
              aws:SourceArn: !GetAtt [CalendarEventsApplication, Outputs.CanlenderEventStartTopic]
        
Outputs:
  SetupStudentAccountFunction:
    Description: "SetupStudentAccountFunction"
    Value: !GetAtt SetupStudentAccountFunction.Arn
  CreateClassroomFunction:
    Description: "CreateClassroomFunction"
    Value: !GetAtt CreateClassroomFunction.Arn
  DeleteClassroomFunction:
    Description: "DeleteClassroomFunction"
    Value: !GetAtt DeleteClassroomFunction.Arn
  ClassroomBucket:
    Value: !Ref ClassroomBucket
  StudentRegistrationUrl:
    Description: URL of your Student to Signup and studentEmail is optional.
    Value: !Sub 'https://${HttpApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/?classroomName=ChangeToYourClassName&studentEmail=YourStudentEmailAddress'
  GetCrossAccountAssumeRoleUrls:
    Description: URL for teacher to get the assume role URL for your student account.
    Value: !Sub 'https://${HttpApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/getCrossAccount.html?classroomName=ChangeToYourClassName'
