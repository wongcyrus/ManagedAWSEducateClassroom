AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  managed-aws-educate-classroom
  Sample SAM Template for managed-aws-educate-classroom
 
Parameters:
  Password:
    Type: String
    NoEcho: true
  SNSTopic:
    Type: String
    Default: ""
  BucketName:
    Type: String
    Default: ""
  StudentCommandEmail:
    Type: String
    Default: ""
  StudentEmailDomains:
    Type: String
    Default: ""
  TeacherCommandEmail:
    Type: String
    Default: ""
  TeacherEmailDomains:
    Type: String
    Default: ""
    
Globals:
  Function:
    Handler: app.lambdaHandler
    Timeout: 180
    Runtime: nodejs12.x
    Layers: 
      - !Ref CommonLayer
    Environment:
      Variables:
        StudentAccountTable: !Ref StudentAccountTable

Conditions:
  HasSnsTopic: !Not [ !Equals [ !Ref SNSTopic, "" ]]

Resources:

  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: managed-aws-educate-classroom-common-layer
      Description: Common code.
      ContentUri: layer/
      CompatibleRuntimes:
        - nodejs12.x
        
  SetupStudentAccountQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 180
      RedrivePolicy: 
        deadLetterTargetArn: !GetAtt SetupStudentAccountDeadLetterQueue.Arn
        maxReceiveCount: 3    
  SetupStudentAccountDeadLetterQueue: 
    Type: AWS::SQS::Queue

  SetupStudentAccountSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      TopicArn: !Ref SNSTopic
      Endpoint: !GetAtt SetupStudentAccountQueue.Arn
      Protocol: sqs
      FilterPolicy:
        receiver:
          - !Ref StudentCommandEmail
        intentName:
          - RegisterStudentAccountIntent
        senderEmailDomain: !Split [ "," , !Ref StudentEmailDomains]
          
  SetupStudentAccountQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Condition: HasSnsTopic
    Properties:
      Queues: [!Ref 'SetupStudentAccountQueue']
      PolicyDocument:
        Version: '2008-10-17'
        Id: PublicationPolicy
        Statement:
        - Sid: Allow-SNS-SendMessage
          Effect: Allow
          Principal:
            AWS: '*'
          Action: ['sqs:SendMessage']
          Resource: !GetAtt [SetupStudentAccountQueue, Arn]
          Condition:
            ArnEquals:
              aws:SourceArn: !Ref 'SNSTopic'
       
  SetupStudentAccountFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: setup-student-account/
      Policies:
        - AmazonDynamoDBFullAccess
        - !If [HasSnsTopic, S3ReadPolicy:{ BucketName: !Ref 'BucketName'}, !Ref "AWS::NoValue"]
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: "sts:AssumeRole"
              Resource: "arn:aws:iam::*:role/crossaccountteacher" 
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SetupStudentAccountQueue.Arn
            BatchSize: 1
            
  CreateStudentStackFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: create-student-stack/
      Policies:
        - AmazonDynamoDBFullAccess
        - !If [HasSnsTopic, S3ReadPolicy:{ BucketName: !Ref 'BucketName'}, !Ref "AWS::NoValue"]
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: "sts:AssumeRole"
              Resource: "arn:aws:iam::*:role/crossaccountteacher" 
              
  DeleteStudentStackFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: delete-student-stack/
      Policies:
        - AmazonDynamoDBFullAccess
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: "sts:AssumeRole"
              Resource: "arn:aws:iam::*:role/crossaccountteacher" 


  CreateClassroomQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 180
      RedrivePolicy: 
        deadLetterTargetArn: !GetAtt CreateClassroomDeadLetterQueue.Arn
        maxReceiveCount: 3    
  CreateClassroomDeadLetterQueue: 
    Type: AWS::SQS::Queue

  CreateClassroomSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      TopicArn: !Ref SNSTopic
      Endpoint: !GetAtt [CreateClassroomQueue, Arn]
      Protocol: sqs
      FilterPolicy:
        receiver:
          - !Ref TeacherCommandEmail
        intentName:
          - CreateClassroomIntent
        senderEmailDomain: !Split [ "," , !Ref TeacherEmailDomains]
          
  CreateClassroomQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Condition: HasSnsTopic
    Properties:
      Queues: [!Ref 'CreateClassroomQueue']
      PolicyDocument:
        Version: '2008-10-17'
        Id: PublicationPolicy
        Statement:
        - Sid: Allow-SNS-SendMessage
          Effect: Allow
          Principal:
            AWS: '*'
          Action: ['sqs:SendMessage']
          Resource: !GetAtt CreateClassroomQueue.Arn
          Condition:
            ArnEquals:
              aws:SourceArn: !Ref 'SNSTopic'              
  CreateClassroomFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: create-classroom/
      Policies:
        - AmazonDynamoDBFullAccess
        - !If [HasSnsTopic, S3ReadPolicy:{ BucketName: !Ref 'BucketName'}, !Ref "AWS::NoValue"]
        - LambdaInvokePolicy:
            FunctionName: !Ref CreateStudentStackFunction
      Environment:
        Variables:
          CreateStudentStackFunctionArn: !GetAtt CreateStudentStackFunction.Arn
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt CreateClassroomQueue.Arn
            BatchSize: 1        
        
  StudentAccountTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions: 
        - 
          AttributeName: "classroomNumber"
          AttributeType: "N"
        - 
          AttributeName: "email"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "classroomNumber"
          KeyType: "HASH"
        - 
          AttributeName: "email"
          KeyType: "RANGE"
      GlobalSecondaryIndexes: 
        - 
          IndexName: "emailGSI"
          KeySchema: 
            - 
              AttributeName: "email"
              KeyType: "HASH"
            - 
              AttributeName: "classroomNumber"
              KeyType: "RANGE"
          Projection: 
            ProjectionType: "ALL"
    
  TeacherUser:
    Type: AWS::IAM::User
    Properties:
      UserName: teacher
      LoginProfile:
        Password: !Ref Password
      Policies:
        - PolicyName: TeacherAssumeRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action: "sts:AssumeRole"
              Resource: "arn:aws:iam::*:role/crossaccountteacher"
            - Effect: Allow
              Action: "lambda:InvokeFunction"
              Resource: 
                - !GetAtt SetupStudentAccountFunction.Arn
                - !GetAtt CreateStudentStackFunction.Arn
                - !GetAtt DeleteStudentStackFunction.Arn
              
  TeacherUserKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName:
        Ref: TeacherUser    
        
Outputs:
  SetupStudentAccountQueue:
    Value: !GetAtt SetupStudentAccountQueue.Arn
  SetupStudentAccountFunction:
    Description: "SetupStudentAccountFunction"
    Value: !GetAtt SetupStudentAccountFunction.Arn
  CreateStudentStackFunction:
    Description: "CreateStudentStackFunction"
    Value: !GetAtt CreateStudentStackFunction.Arn
  DeleteStudentStackFunction:
    Description: "DeleteStudentStackFunction"
    Value: !GetAtt DeleteStudentStackFunction.Arn
  AccessKey:
    Value: !Ref 'TeacherUserKey'
    Description: AWSAccessKeyId of Teacher User
  SecretKey:
    Value: !GetAtt [TeacherUserKey, SecretAccessKey]
    Description: AWSSecretAccessKey of Teacher User