AWSTemplateFormatVersion: '2010-09-09'
Description: AWS Cloud9 Environment
Parameters:
  InstanceType:
    Description: EC2 instance type on which IDE runs
    Type:        String
    Default:     t2.micro
  KeyPairName:
    Type: String
  KeyMaterial:
    Type: String
  AmiId:
    Type:  String
  UserData:
    Type: String
    Default: ""
  Password:
    Type: String
  RdpFileUrl:
    Type: String
Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::Cloudformation::Init:
        configSets:
          config:
            - setup
            - finalize
        setup:
          files:
            c:\cfn\cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
            c:\cfn\hooks.d\cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.BastionServer.Metadata.AWS::CloudFormation::Init
                action=cfn-init.exe -v -s ${AWS::StackId} -r EC2Instance --region ${AWS::Region}
          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - c:\cfn\cfn-hup.conf
                  - c:\cfn\hooks.d\cfn-auto-reloader.conf
        finalize:
            1-signal-success:
              command: powershell.exe -Command "Write-AWSQuickStartStatus"
              waitAfterCompletion: '0'      
              
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroups: [!Ref InstanceSecurityGroup]
      KeyName: !Ref KeyPairName
      ImageId: !Ref AmiId
      UserData:
        Fn::Base64:
          !Sub
            - |
              <script>
                net.exe user Administrator ${Password}
                ${UserData}
                cfn-init.exe -v -s ${StackName} -r EC2Instance --region ${Region}
                cfn-signal.exe -e %ERRORLEVEL% ${WaitHandleHash} 
              </script>
            -   
              WaitHandleHash:
                  Fn::Base64: !Ref WaitHandle
              StackName: !Ref AWS::StackName
              Region: !Ref AWS::Region
              UserData: !Ref UserData
              Password: !Ref Password
      Tags:
        -
          Key: Password
          Value: !Ref Password
          
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: "0.0.0.0/0"  
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"

  WaitHandle: 
    Type: AWS::CloudFormation::WaitConditionHandle
  WaitCondition: 
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: "EC2Instance"
    Properties: 
      Handle: 
        Ref: "WaitHandle"
      Timeout: "300"
      Count: 1

        
Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref EC2Instance
  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, AvailabilityZone]
  PublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, PublicDnsName]
  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, PublicIp]
  Password:
    Description: The message from the custom resource.
    Value: !Ref Password
  RdpFileUrl:
    Value: !Sub
            - '${RdpFileUrl}?PublicDNS=${PublicDNS}'
            -   
              RdpFileUrl: !Ref RdpFileUrl
              PublicDNS: !GetAtt [EC2Instance, PublicDnsName]
             