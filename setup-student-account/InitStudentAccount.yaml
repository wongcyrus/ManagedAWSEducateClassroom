AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  TeacherAccountId:
    Type: String
  StudentEmail:
    Type: String
Resources:
  KeyProvider:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'ManagedAWSAcademyLearnerLab-${TeacherAccountId}-KeyProvider'
      Runtime: nodejs16.x
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LabRole'
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = async(event) => {
              const response = {
                  statusCode: 200,
                  body: JSON.stringify({
                      "AWS_ACCESS_KEY_ID": process.env.AWS_ACCESS_KEY_ID,
                      "AWS_SECRET_ACCESS_KEY": process.env.AWS_SECRET_ACCESS_KEY,
                      "AWS_SESSION_TOKEN": process.env.AWS_SESSION_TOKEN
                  }),
              };
              return response;
          };
      Description: Get AWS_ACCESS_KEY, AWS_ACCESS_KEY_ID and AWS_SESSION_TOKEN
      TracingConfig:
        Mode: Active  
        
  KeyProviderUrl:
    Type: AWS::Lambda::Url
    Properties: 
      AuthType: NONE
      TargetFunctionArn: !Ref KeyProvider

  KeyProviderInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt KeyProvider.Arn
      Action: lambda:InvokeFunctionUrl
      Principal: "*"
      FunctionUrlAuthType: NONE
      
  NotifyStudentTopic:
    Type: 'AWS::SNS::Topic'
    Properties: 
      DisplayName: !Sub 'NotifyStudentTopic${TeacherAccountId}'
      TopicName: !Sub 'NotifyStudentTopic${TeacherAccountId}'
    
  StudentSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !Ref StudentEmail
      Protocol: email
      TopicArn: !Ref NotifyStudentTopic

  # Lambda function to catch CloudFormation events (forwarded by SNS) and create new SNS notifications from them
  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Forward CloudFormation notifications to SNS topic"
      Handler: "index.handler"
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LabRole'
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref "NotifyStudentTopic"
          NOTIFICATION_TYPES: "CREATE_COMPLETE"
      Code:
        ZipFile: |
            import os
            import boto3
            import json
            import re
            
            def _to_env(name):
              s1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)
              return re.sub('([a-z0-9])([A-Z])', r'\1_\2', s1).upper()
              
            def handler(event, context):
                # Notification types
                env_notification_types = os.getenv("NOTIFICATION_TYPES", None)
                notification_types = env_notification_types.split(",") if env_notification_types else None
                if not notification_types:
                    print("At least one CloudFormation notification type needs to be specified")
                    return
                # SNS topic ARN
                sns_topic_arn = os.getenv("SNS_TOPIC_ARN", None)
                if not sns_topic_arn:
                    print("The ARN of the SNS topic needs to be specified")
                    return
                try:
                    message = str(event["Records"][0]["Sns"]["Message"]).replace("\n", ",")
                except Exception:
                    print("Message could not be parsed. Event: %s" % (event))
                    return
                # Ignore resources that are not the CloudFormation stack itself
                if "ResourceType='AWS::CloudFormation::Stack'" not in message:
                    return
                for notification_type in notification_types:
                    if notification_type not in message:
                        continue
                    
                    m = str(event["Records"][0]["Sns"]["Message"])
                    start = m.find("StackName='") + len("StackName='")
                    end = m.find("ClientRequestToken='") - 2
                    stackName = m[start:end]
                    print(stackName)
                    cf = boto3.client('cloudformation')
                    r = cf.describe_stacks(StackName=stackName)

                    stack, = r['Stacks']
                    outputs = stack['Outputs']
                
                    out = {}
                    for o in outputs:
                        key = _to_env(o['OutputKey'])
                        out[key] = o['OutputValue']
                    print(json.dumps(out, indent=2))
                    
                    sns_subject = "CloudFormation for %s" % (stackName)
                    sns_message = message.replace(",", "\n")
                    boto3.client('sns').publish(
                        Subject=sns_subject,
                        Message=json.dumps(out, indent=2),
                        TopicArn=sns_topic_arn
                    )
      Runtime: "python3.9"
      Timeout: "90"

  # SNS topic and inline subscription to forward events to Lambda function
  SNSCloudFormationTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        -
          Endpoint: !GetAtt "LambdaFunction.Arn"
          Protocol: "lambda"
    DependsOn: "LambdaFunction"

  # Lambda permission to allow SNS to forward events to Lambda function
  LambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn: !Ref "SNSCloudFormationTopic"
      FunctionName: !GetAtt "LambdaFunction.Arn"    
Outputs:
  KeyProviderLambdaArn:
    Value: !GetAtt KeyProvider.Arn
  SNSCloudFormationTopic:
    Value: !Ref SNSCloudFormationTopic
  NotifyStudentTopic:
    Value: !Ref NotifyStudentTopic
  KeyProviderUrl:
    Value: !GetAtt KeyProviderUrl.FunctionUrl